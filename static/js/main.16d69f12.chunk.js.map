{"version":3,"sources":["db.js","WorkingHours.js","components/Form1.js","components/WorldLang.js","App.js","serviceWorker.js","index.js"],"names":["db","k","v","window","localStorage","setItem","JSON","stringify","d","str","getItem","parse","e","console","log","RangePicker","TimePicker","App","props","formRef","React","createRef","dateFormat","timeFormat","onSelect","momentObj","dateStr","format","setState","selectedDate","form","current","dateMap","state","dateRange","hasOwnProperty","type","content","length","setFieldsValue","timeRange","map","o","moment","onTotalChange","total","onTotalDChange","totalD","getListData","value","dateCellRender","listData","className","item","text","Array","isArray","m","join","key","status","onFormCancel","persistState","onFormOk","validateFields","then","values","some","isMoment","message","error","saving","oldState","success","catch","errorInfo","clearCurrentDate","oldMap","newMap","theK","onImport","document","getElementById","click","importText","txt","split","filter","lineTxt","datePart","timePart","reduce","r","onUploadChange","files","target","file","fileReader","FileReader","addEventListener","ev","result","readAsText","onExport","exportTextStr","saveTxt","blob","Blob","saveAs","selectedRange","this","nowM","month","totalWorkingSeconds","totalWorkingDays","start","end","diff","h","toFixed","totalDesc","remainDays","remainHours","remainHoursDesc","dailyEstimatedHours","dataSource","desc","showForm","modalTitle","onClick","onChange","size","columns","title","dataIndex","pagination","style","width","rowKey","id","name","display","accept","forceRender","visible","onCancel","centered","onOk","confirmLoading","labelCol","span","wrapperCol","ref","Item","label","rules","required","Component","TextArea","Input","layout","tailLayout","Demo","Form","useForm","initialValues","remember","onFinish","onFinishFailed","Password","autoSize","minRows","action","obj","htmlType","err","WorldLang","secret","ciphertext","CryptoJS","AES","encrypt","toString","originalText","decrypt","enc","Utf8","Form1","TabPane","Tabs","callback","tab","WorkingHours","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16d69f12.chunk.js","sourcesContent":["export const db = {\n    save: function (k, v) {\n        window.localStorage.setItem(k, JSON.stringify(v));\n    },\n    read: function (k, d) {\n\n        let str = window.localStorage.getItem(k);\n        if (str) {\n            try {\n                return JSON.parse(str);\n            } catch (e) {\n                console.log('error occurred while parsing: ', str);\n            }\n        }\n        return d;\n    }\n};","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport moment from 'moment';\nimport {Calendar, InputNumber, Table, Badge, TimePicker, Modal, Form, message} from 'antd';\nimport {db} from \"./db\";\nimport { saveAs } from 'file-saver';\n\nconst { RangePicker } = TimePicker;\n\nclass App extends React.Component {\n\n    formRef = React.createRef();\n    dateFormat = \"YYYY-MM-DD\";\n    timeFormat = \"HH:mm\";\n\n    constructor(props) {\n        super(props);\n        const dateMap = db.read('dateMap', {});\n        const total = +db.read('total', 150);\n        const totalD = +db.read('totalD', 22);\n        // console.log('init', dateMap);\n        this.state = {\n            total, // total target working hours of the month\n            totalD, //  total working days in month\n            selectedDate: null,\n            selectedRange: [],\n            dateMap,\n            saving: false,\n        };\n    }\n\n    onSelect = (momentObj) => {\n        const dateStr = momentObj.format(this.dateFormat);\n        this.setState({\n            selectedDate: dateStr,\n        }, () => {\n            const form = this.formRef.current;\n            if (!form) return;\n            const { dateMap } = this.state;\n            let dateRange = [];\n            if (dateMap.hasOwnProperty(dateStr)) {\n                const { type, content } = dateMap[dateStr];\n                if (type === 'success' && content && content.length === 2) {\n                    dateRange = content;\n                }\n            }\n            form.setFieldsValue({\n                timeRange: dateRange.map(o => moment(o)),\n            });\n        });\n    };\n\n    onTotalChange = (v) => {\n        this.setState({\n            total: v,\n        });\n        db.save('total', v);\n    };\n\n    onTotalDChange = (v) => {\n        this.setState({\n            totalD: v,\n        });\n        db.save('totalD', v);\n    };\n\n    getListData = (value) => {\n        const { dateMap } = this.state;\n        const k = value.format(this.dateFormat);\n        if (dateMap.hasOwnProperty(k)) {\n            return [dateMap[k]];\n        }\n        return [];\n    };\n\n    dateCellRender = (value) => {\n        const listData = this.getListData(value);\n        return (\n            <ul className=\"events\">\n                {listData.map(item => {\n                    let text;\n                    if (Array.isArray(item.content)) {\n                        text = item.content.map(m => moment(m).format(this.timeFormat)).join(' ~ ');\n                    } else {\n                        text = item.content;\n                    }\n                    return (\n                        <li key={item.content}>\n                            <Badge status={item.type} text={text} />\n                        </li>\n                    );\n                })}\n            </ul>\n        );\n    };\n\n    onFormCancel = () => {\n        this.setState({\n            selectedDate: null,\n        });\n    };\n\n    persistState = () => {\n        const { dateMap } = this.state;\n        db.save('dateMap', dateMap);\n    };\n\n    onFormOk = () => {\n        this.formRef.current.validateFields().then(values => {\n            const { timeRange } = values;\n            if (\n                !timeRange\n                || !Array.isArray(timeRange)\n                || timeRange.length !== 2\n                || timeRange.some(o => !o || !moment.isMoment(o))\n            ) {\n                return message.error('Time range is in wrong format');\n            }\n            this.setState({\n                saving: true,\n            });\n            this.setState(oldState => ({\n               ...oldState,\n               dateMap: {\n                 ...oldState.dateMap,\n                 [oldState.selectedDate]: {\n                     type: 'success',\n                     content: timeRange,\n                 },\n               },\n            }),  () => {\n                this.persistState();\n                this.setState({\n                    saving: false,\n                    selectedDate: null,\n                });\n                message.success('Working Hours Saved!');\n            });\n        }).catch(errorInfo => {\n            console.log('form error', errorInfo);\n        })\n    };\n\n    clearCurrentDate = () => {\n        this.setState({\n            saving: true,\n        });\n        this.setState(oldState => {\n            const oldMap = oldState.dateMap;\n            const newMap = {};\n            const theK = oldState.selectedDate;\n            for (const k in oldMap) {\n                if (oldMap.hasOwnProperty(k)) {\n                    if (theK !== k) {\n                        newMap[k] = oldMap[k];\n                    }\n                }\n            }\n            return {\n                ...oldState,\n                dateMap: newMap,\n            };\n        },  () => {\n            this.persistState();\n            this.setState({\n                saving: false,\n                selectedDate: null,\n            });\n            message.success('Working Hours Cleared!');\n        });\n    };\n\n    onImport = () => {\n        document.getElementById(\"image\").click();\n    };\n\n    importText = (txt) => {\n        // console.log(moment('03月02日', 'MM月DD日').format('YYYY-MM-DD HH:mm:ss'));\n        const dateMap = txt\n            .split('\\n')\n            .filter(o => !!o)\n            .map(lineTxt => {\n                const [datePart, timePart] = lineTxt.split(' ');\n                const key = moment(datePart, 'MM月DD日').format(this.dateFormat);\n                const content = timePart.split('-').map(o => moment(o, 'HHmm'));\n                return {\n                    key,\n                    value: {\n                        type: 'success',\n                        content,\n                    },\n                };\n            }).reduce((r, e) => ({...r, [e.key]: e.value }), {});\n        this.setState({\n            dateMap,\n        });\n        db.save('dateMap', dateMap);\n    };\n\n    onUploadChange = e => {\n      // console.log('on upload change', e.target.files);\n      const files = e.target.files;\n      if (files && files.length > 0) {\n          const file = files[0];\n          // console.log('file is', file);\n          const fileReader = new FileReader();\n          // fileReader\n          fileReader.addEventListener('loadend', ev => {\n              this.importText(fileReader.result);\n              // console.log('loadend', fileReader.result);\n          });\n          fileReader.readAsText(file);\n\n      }\n    };\n\n    onExport = () => {\n        const {dateMap} = this.state;\n        let exportTextStr = '';\n        for (const k in dateMap) {\n            if (dateMap.hasOwnProperty(k)) {\n                const { content, type } = dateMap[k];\n                if (type === 'success' && !!content && Array.isArray(content) && content.length === 2) {\n                    const lineStr = `${moment(k).format('MM月DD日')} ${content.map(o => moment(o).format('HHmm')).join('-')}\\n`;\n                    exportTextStr += lineStr;\n                }\n            }\n        }\n        // console.log('export str is ', exportTextStr);\n        this.saveTxt(exportTextStr);\n    };\n\n    saveTxt = (content) => {\n        const filename = \"export.txt\";\n        const blob = new Blob([content], {\n            type: \"text/plain;charset=utf-8\"\n        });\n        saveAs(blob, filename);\n    };\n\n    render() {\n        const { total, selectedDate, saving, dateMap, totalD } = this.state;\n        const columns = [\n            {\n                title: \"Description\",\n                dataIndex: \"desc\",\n                key: \"desc\",\n            },\n            {\n                title: \"Result (Calculated)\",\n                dataIndex: \"result\",\n                key: \"result\",\n            },\n        ];\n        const now = moment();\n        const nowM = now.month();\n        let totalWorkingSeconds = 0;\n        let totalWorkingDays = 0;\n        for (let k in dateMap) {\n            if (dateMap.hasOwnProperty(k)) {\n                if (moment(k).month() === nowM) {\n                    const {type, content} = dateMap[k];\n                    if (type === 'success') {\n                        const [start, end] = content;\n                        const seconds = moment(end).diff(moment(start), 'seconds') - 3600; // Lunch Break 1h\n                        totalWorkingSeconds += seconds;\n                        totalWorkingDays += 1;\n                    }\n                }\n            }\n        }\n        const h = (totalWorkingSeconds / 3600).toFixed(2);\n        const totalDesc = `${h}h`; // 69h\n        const remainDays = totalD - totalWorkingDays;\n        const remainHours = total - (+h);\n        const remainHoursDesc = remainHours.toFixed(2);\n        const dailyEstimatedHours = (remainHours / remainDays).toFixed(2); // .2f\n        const dataSource = [\n            { desc: \"Current Total\", result: totalDesc },\n            { desc: \"Remaining\", result: `${remainDays}days / ${remainHoursDesc}h` },\n            { desc: \"Daily Estimated Hours\", result: `${dailyEstimatedHours}h (1h Lunch Break excluded)` },\n        ];\n        const showForm = !!selectedDate;\n        const layout = {\n            labelCol: { span: 8 },\n            wrapperCol: { span: 16 },\n        };\n        const modalTitle = (\n            <div>\n                {\"Fill in working hours for \" + (selectedDate || '')}\n                <a className=\"clear-time\" onClick={this.clearCurrentDate}>\n                    Delete\n                </a>\n            </div>\n        );\n        return (\n            <div className=\"App\">\n                <div className=\"title\">Working Hour Calculator</div>\n                <div className=\"form\">\n                    <div className=\"title1\">Step1. Fill in information below</div>\n                    <div className=\"body\">\n                        <div className=\"total-label\">Target Total Working Hours</div>\n                        <div>\n                            <InputNumber\n                                value={total}\n                                onChange={this.onTotalChange}\n                            />\n                        </div>\n                        <div className=\"total-suffix\">(Default: 150 Hours)</div>\n\n                    </div>\n                    <div className=\"body\">\n                        <div className=\"total-label\">Total Working Days In Month</div>\n                        <div>\n                            <InputNumber\n                                value={totalD}\n                                onChange={this.onTotalDChange}\n                            />\n                        </div>\n                        <div className=\"total-suffix\">(Default: 22 Days)</div>\n                    </div>\n                </div>\n                <div className=\"result\">\n                    <div className=\"title1\">\n                        Step3. Results come below\n                    </div>\n                    <div className=\"body\">\n                        <Table\n                            size={'small'}\n                            columns={columns}\n                            dataSource={dataSource}\n                            pagination={false}\n                            style={{ width: '100%' }}\n                            rowKey=\"desc\"\n                        />\n                    </div>\n                </div>\n                <div className=\"cal\">\n                    <div className=\"title1\">\n                        <div className=\"cal-header\">\n                            <div>Step2. Click on date cells to take note on daily working hours </div>\n                            <div>\n                                <a className=\"cal-import\" onClick={this.onImport}>Import</a>\n                                <input\n                                    type=\"file\"\n                                    id=\"image\"\n                                    name=\"image\"\n                                    style={ { display: 'none' }}\n                                    onChange={this.onUploadChange}\n                                    accept=\"txt\"\n                                />\n                                <a onClick={this.onExport}>Export</a>\n                                {/*<a onClick={this.delAll}>Delete All In This Month</a>*/}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"\">\n                        <Calendar\n                            onSelect={this.onSelect}\n                            dateCellRender={this.dateCellRender}\n                        />\n                    </div>\n\n                </div>\n                <Modal\n                    forceRender\n                    visible={showForm}\n                    title={modalTitle}\n                    onCancel={this.onFormCancel}\n                    width={700}\n                    centered\n                    onOk={this.onFormOk}\n                    confirmLoading={saving}\n                >\n                    <div className=\"form-container\">\n                        <Form {...layout} name=\"basic\" ref={this.formRef}>\n                            <Form.Item\n                                name=\"timeRange\"\n                                label=\"Check-in & Off Time\"\n                                rules={[{ required: true, message: 'Please select time range!' }]}\n                            >\n                                <RangePicker />\n                            </Form.Item>\n                        </Form>\n                    </div>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport { Form, Input, Button, Checkbox } from 'antd';\n\nconst { TextArea } = Input;\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  // wrapperCol: { offset: 8, span: 16 },\n};\n\nconst Demo = ({ onOk }) => {\n  const onFinish = values => {\n    console.log('Success:', values);\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const [form] = Form.useForm();\n  const onFill = (action) => {\n    // console.log(form);\n    form.validateFields().then(values => {\n      onOk({ action, ...values });\n    }).catch(err => {\n      // console.log(222, err);\n    });\n  };\n\n  const buttons = [\n    {title: '-> 世界语', className: 'left', action: 'world' },\n    {title: '人话 <-', className: 'right', action: 'human' },\n  ];\n\n  return (\n    <Form\n      {...layout}\n      name=\"basic\"\n      initialValues={{ remember: true }}\n      onFinish={onFinish}\n      onFinishFailed={onFinishFailed}\n      form={form}\n    >\n\n      <Form.Item\n        label=\"暗号\"\n        name=\"secret\"\n        rules={[{ required: true, message: '缺暗号，石宇要！' }]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        label=\"内容\"\n        name=\"content\"\n        rules={[{ required: true, message: '输入要加密的内容！' }]}\n\n      >\n        <TextArea\n          autoSize={{\n            minRows: 3,\n          }}\n        />\n      </Form.Item>\n\n      <Form.Item {...tailLayout}>\n        {buttons.map(obj => (\n          <Button\n            className={\"world-lang-button \" + obj.className}\n            type=\"ghost\"\n            htmlType=\"button\"\n            onClick={() => onFill(obj.action)}\n            key={obj.action}\n          >\n            {obj.title}\n          </Button>\n        ))}\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default Demo;\n","import React, {Component} from 'react';\nimport Form1 from \"./Form1\";\nimport CryptoJS from 'crypto-js';\n\nclass WorldLang extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: '',\n    };\n  }\n\n  onOk = ({ action, secret, content }) => {\n    // console.log(111, form);\n    if (action === 'world') {\n      // Encrypt\n      const ciphertext = CryptoJS.AES.encrypt(content, secret).toString();\n      this.setState({\n        result: ciphertext,\n      });\n    } else {\n      // Decrypt\n      const bytes  = CryptoJS.AES.decrypt(content, secret);\n      const originalText = bytes.toString(CryptoJS.enc.Utf8);\n      this.setState({\n        result: originalText,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"world-lang-wrapper\">\n        <div className=\"content-area\">\n          <Form1 onOk={this.onOk} />\n        </div>\n        <div className=\"result\">\n          <div className=\"result-label\">\n            结果：\n          </div>\n          <div className=\"result-text\">\n            {this.state.result}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WorldLang;\n","import React from 'react'\nimport WorkingHours from './WorkingHours';\nimport WorldLang from './components/WorldLang';\nimport { Tabs } from 'antd';\n\nconst { TabPane } = Tabs;\n\nfunction callback(key) {\n    console.log(key);\n}\n\nfunction App () {\n    return (\n        <div>\n            <Tabs onChange={callback} type=\"card\">\n\n                <TabPane tab=\"世界语翻译机 v0.1\" key=\"2\">\n                    <WorldLang />\n                </TabPane>\n\n                <TabPane tab=\"工作时间计算器 v0.1\" key=\"1\">\n                    <WorkingHours />\n                </TabPane>\n\n                {/*<TabPane tab=\"Tab 3\" key=\"3\">*/}\n                {/*    Content of Tab Pane 3*/}\n                {/*</TabPane>*/}\n            </Tabs>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}